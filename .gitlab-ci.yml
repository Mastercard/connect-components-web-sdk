include:
  - project: devops/central-ci
    file: jobs/by-stage/scan/black-duck-scan.yml

image: node:20

stages:
  - install
  - build
  - cs-quality
  - cs-security
  - test
  - scan
  - publish
  - upload

dependencies:
  stage: install
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
  script:
    - npm ci

build:
  stage: build
  script:
    - npm run build:prod
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull # https://docs.gitlab.com/ee/ci/yaml/#cachepolicy
  artifacts:
    paths:
      - dist/

lint:
  stage: test
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull # https://docs.gitlab.com/ee/ci/yaml/#cachepolicy
  script:
    - npm run lint

publish:
  stage: publish
  only:
    - master
  when: manual
  script:
    # https://www.npmjs.com/~mastercardapi
    - echo -e "//registry.npmjs.org/:_authToken=${MASTERCARD_NPMJS_AUTOMATION_TOKEN}" > ./.npmrc
    - npm whoami
    - npm publish --access=public
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull

upload:s3:prod:
  stage: upload
  image: dcr.fini.city/base-images/awscli:awscli-928523-20231129
  only:
    - master
  when: manual
  script:
    - 'VERSION=$(grep ''"version"'' package.json | cut -d''"'' -f4)'
    - 'aws s3 cp ./dist/ s3://prod-connectzone/js/connect-web-sdk@$VERSION/ --recursive'
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull
  tags:
    - docker-in-docker

# prettier:
# -- Do we want this?
#   stage: test
#   cache:
#     key: ${CI_COMMIT_REF_SLUG}
#     paths:
#       - node_modules/
#     policy: pull # https://docs.gitlab.com/ee/ci/yaml/#cachepolicy
#   script:
#     - npm run prettier-check

# Unit tests / Coverage:
# Todo

# e2e Tests:
# Todo

# Ignoring Twistlock for now -- we aren't creating a container
# twistlock:manual:
#   variables:
#     GIT_STRATEGY: none
#   image: dcr.fini.city/devops/osiris
#   when: manual
#   cache: {}
#   stage: scan
#   script:
#     - scan_container $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID

# twistlock:
#   extends: twistlock:manual
#   only:
#     - master
#     - /^release\/.*$/
#     - develop
#     - /^hotfix\/.*$/
#   when: on_success

checkmarx:manual:
  stage: scan
  image:
    name: dcr.fini.city/images/cx-flow/master:latest
  when: manual
  before_script: []
  script:
    - java -noverify -XX:+UnlockExperimentalVMOptions -XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -jar /usr/src/app/cx-flow.jar --spring.config.location=/usr/src/app/config.yml --scan --app=${CI_PROJECT_PATH_SLUG} --cx-project=${CI_PROJECT_PATH_SLUG} --repo-url=${CI_PROJECT_URL}/ --branch=${CI_COMMIT_REF_NAME} --cx-flow.zip-exclude='\.git/.*, .*\.png' --filter-severity=Medium --f=.
      # --logging.level.org.springframework.web.client.RestTemplate=TRACE
      # --logging.level.com.checkmarx.flow.service=DEBUG
      # --logging.level.org.apache.http.wire=TRACE
  cache: {}
  dependencies: []
  only:
    - merge_requests
    - /^release\-.*/
    - master

checkmarx:
  extends: checkmarx:manual
  only:
    - develop
  when: on_success

sonarqube.manual:
  stage: scan
  image:
    name: sonarsource/sonar-scanner-cli:latest
#   entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true

  only:
    - merge_requests
    - /^release\-.*/
    - master

sonarqube:
  extends: sonarqube.manual
  only:
    - develop
    - master
    - /^release\/.*$/
    - /^hotfix\/.*$/
  when: on_success

package-audit:
  extends: dependencies
  stage: cs-security
  allow_failure: true
  script:
    - npm run security:package-audit
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull
  only:
    - merge_requests
    - /^release\-.*/
    - master

types-check:
  #tsconfig
  extends: dependencies
  stage: cs-quality
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull
  script:
    - npm run quality:types
  only:
    - merge_requests
    - /^release\-.*/
    - master

lint-check:
  #Eslint
  extends: dependencies
  stage: cs-quality
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull
  script:
    - npm run quality:lint
  only:
    - merge_requests
    - /^release\-.*/
    - master

unit-test-coverage:
  extends: dependencies
  stage: cs-quality
  script:
    - npm run quality:unit-coverage
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull
  artifacts:
    when: always
    paths:
      - coverage
    expire_in: 7 days
  only:
    - merge_requests
    - /^release\-.*/
    - master
    - develop
